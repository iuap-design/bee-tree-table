
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Button from 'bee-button';
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import TreeTable from '../src';


const CARET = <i className="uf uf-arrow-down"></i>;

const CARETUP = <i className="uf uf-arrow-up"></i>;


var Demo1 = require("./demolist/Demo1");var Demo2 = require("./demolist/Demo2");var Demo3 = require("./demolist/Demo3");var Demo4 = require("./demolist/Demo4");var Demo5 = require("./demolist/Demo5");var DemoArray = [{"example":<Demo1 />,"title":" 根据用户喜好，自己设定tree结构","code":"\n/**\n*\n* @title 根据用户喜好，自己设定tree结构\n* @description 点击每项tree结构的时候,右侧table进行相应数据更新\n*\n*/\nimport React, { Component, PropTypes } from 'react';\nimport { Con, Row, Col } from 'bee-layout';\nimport TreeTable from 'bee-tree-table';\nimport Tree from 'bee-tree';\n\nconst propTypes = {};\nconst TreeNode = Tree.TreeNode;\nconst defaultProps = {\n    keys: ['0_0_0', '0_0_1']\n};\nconst value = [{\n            key: \"2-0-0\",\n            name: \"thirdChild1\",\n            age: 100,\n            address: \"New York No.2-1-1 Lake Park\"\n        }, {\n            key: \"2-0-1\",\n            name: \"thirdChild2\",\n            age: 100,\n            address: \"New York No.2-1-2 Lake Park\"\n        }, {\n            key: \"2-0-2\",\n            name: \"thirdChild3\",\n            age: 100,\n            address: \"New York No.2-1-3 Lake Park\"\n        }];\nclass Demo1 extends Component {\n    constructor(props) {\n        super(props);\n        const keys = this.props.keys;\n        this.state = {\n            defaultExpandedKeys: keys,\n            defaultSelectedKeys: keys,\n            data: \"0_0\",\n            dataSource: [],\n            selectedKeys:[]\n        };\n    }\n    /**\n     * 被选中的时候，触发的事件\n     */\n    onSelect = (info) => {\n        console.log('selected', info +\"first\");\n        let data;\n        if (info) {\n            data = info[0];\n             this.setState({\n                data: data\n            }) \n        }\n\n    }\n    /**\n     * 这里与后台请求用来返回数据\n     */\n    getData = (value) =>{\n            this.setState({\n                dataSource: value\n            })\n    }\n\n    render() {\n        let {data,dataSource} = this.state;\n        return (\n            <div>\n                <div>\n                    <Row>\n\n                        <Col md={12} sm={12}>\n                            <TreeTable data={data} dataSource={dataSource} >\n                                <Tree className=\"myCls\" showLine\n                                    onSelect={this.onSelect} \n                                    selectedKeys={this.state.selectedKeys}\n                                >\n                                    <TreeNode title=\"node 0_0\" key=\"0_0\">\n                                        <TreeNode title=\"node 0_0_0\" key=\"0_0_0\" >\n                                            <TreeNode title=\"node 0_0_0_0\" key=\"0_0_0_0\" />\n                                            <TreeNode title=\"node 0_0_0_1\" key=\"0_0_0_1\" />\n                                        </TreeNode>\n                                        <TreeNode title=\"node 0_0_1\" key=\"0_0_1\">\n                                            <TreeNode title=\"node 0_0_1_0\" key=\"0_0_1_0\" />\n                                        </TreeNode>\n                                    </TreeNode>\n                                </Tree>\n                            </TreeTable>\n                        </Col>\n                    </Row>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nDemo1.defaultProps = defaultProps;\n","desc":" 点击每项tree结构的时候,右侧table进行相应数据更新"},{"example":<Demo2 />,"title":" Tree数据可控事例","code":"\n\n/**\n*\n* @title Tree数据可控事例\n* @description 点击每项tree结构的时候,右侧table进行相应数据更新\n*\n*/\n\nimport React, { Component, PropTypes } from 'react';\nimport { Con, Row, Col } from 'bee-layout';\nimport TreeTable from 'bee-tree-table';\nimport Tree from 'bee-tree';\n\nconst x = 2;\nconst y = 1;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n    const preKey = _preKey || '0';\n    const tns = _tns || gData;\n\n    const children = [];\n    for (let i = 0; i < x; i++) {\n        const key = `${preKey}_${i}`;\n        tns.push({ title: key, key:\"node\"+key });\n        if (i < y) {\n            children.push(key);\n        }\n    }\n    if (_level < 0) {\n        return tns;\n    }\n    const level = _level - 1;\n    children.forEach((key, index) => {\n        tns[index].children = [];\n        return generateData(level, key, tns[index].children);\n    });\n};\ngenerateData(z);\n\nconst TreeNode = Tree.TreeNode;\n\n\nclass Demo2 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expandedKeys: ['0_0_0', '0_0_1'],\n            autoExpandParent: true,\n            selectedKeys: [],\n            data: \"0_0\"\n        };\n        this.onExpand = this.onExpand.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n    }\n    onExpand(expandedKeys) {\n        this.setState({\n            expandedKeys,\n            autoExpandParent: false,\n        });\n    }\n   \n    onSelect = (info) => {\n        console.log('selected', info);\n        let data;\n        if (info) {\n            data = info[0].substring(4);\n            this.setState({\n                data: data\n            })\n        }\n\n    }\n    render() {\n         let data = this.state.data;\n        const loop = data => data.map((item) => {\n            if (item.children) {\n                return (\n                    <TreeNode key={item.key} title={item.key} >\n                        {loop(item.children)}\n                    </TreeNode>\n                );\n            }\n            return <TreeNode key={item.key} title={item.key} />;\n        });\n        return (\n            <TreeTable data={data} >\n                <Tree\n                    onExpand={this.onExpand} expandedKeys={this.state.expandedKeys}\n                    autoExpandParent={this.state.autoExpandParent}\n                    onSelect={this.onSelect} selectedKeys={this.state.selectedKeys}\n                >\n                    {loop(gData)}\n                </Tree>\n            </TreeTable>\n\n\n        );\n    }\n};\n\n\n","desc":" 点击每项tree结构的时候,右侧table进行相应数据更新"},{"example":<Demo3 />,"title":" 带分页的树表结构","code":"\n/**\n*\n* @title 带分页的树表结构\n* @description 用户点击左侧的树形结构，可以进行右侧table数据的请求展示，table支持分页功能的操作\n*\n*/\nimport React, { Component, PropTypes } from 'react';\nimport { Con, Row, Col } from 'bee-layout';\nimport Button from 'bee-button';\nimport TreeTable from 'bee-tree-table';\nimport Tree from 'bee-tree';\n\nconst propTypes = {};\nconst TreeNode = Tree.TreeNode;\nconst defaultProps = {\n    keys: ['0_0_0', '0_0_1'],\n    defaultColumn: []\n};\n\nclass Demo3 extends Component {\n    constructor(props) {\n        super(props);\n        const keys = this.props.keys;\n        this.state = {\n            defaultExpandedKeys: keys,\n            defaultSelectedKeys: keys,\n            data: \"1_0\",\n            dataSource: [],\n            pageFlag: true,\n            selectedKeys: []\n        };\n        this.defaultColumn = [{\n            title: \"第一列\",\n            dataIndex: \"name\",\n            key: \"name\"\n        },\n        {\n            title: \"第二列\",\n            dataIndex: \"mail\",\n            key: \"mail\"\n        },\n        {\n            title: \"第三列\",\n            dataIndex: \"status\",\n            key: \"status\"\n        },\n        {\n            title: \"第四列\",\n            dataIndex: \"date\",\n            key: \"date\"\n        }, {\n            title: \"第五列\",\n            dataIndex: \"address\",\n            key: \"address\"\n        }]\n    }\n    /**\n     * 点击每一项\n     */\n    onSelect = (info) => {\n        console.log('selected', info);\n        let data;\n        if (info) {\n            data = info[0];\n            this.setState({\n                data: data\n            })\n            // this.getData(value); 这个方法用来与后台数据进行请求\n        }\n\n    }\n    /**\n     * 这里与后台请求用来返回数据\n     */\n    getData = (value) => {\n        this.setState({\n            dataSource: value\n        })\n    }\n\n    render() {\n        let { data, dataSource, pageFlag } = this.state;\n        return (\n            <div>\n                <div>\n                    <Row>\n\n                        <Col md={12} sm={12}>\n                            <TreeTable data={data} dataSource={dataSource} pageFlag={pageFlag} columns={this.defaultColumn}>\n                                <Tree className=\"myCls\" showLine\n                                    defaultExpandedKeys={this.state.defaultExpandedKeys}\n                                    defaultSelectedKeys={this.state.defaultSelectedKeys}\n                                    onSelect={this.onSelect}\n                                    selectedKeys={this.state.selectedKeys}\n                                >\n                                    <TreeNode title=\"畅捷通网络科技\" key=\"1_0\">\n                                        <TreeNode title=\"集成开发部\" key=\"1_0_0\" >\n                                            <TreeNode title=\"前端技术部\" key=\"1_0_0_0\" />\n                                        </TreeNode>\n                                        <TreeNode title=\"集团iuap平台\" key=\"1_1_0\">\n                                            <TreeNode title=\"集团iuap平台第一子公司\" key=\"1_1_0_1\" />\n                                        </TreeNode>\n                                    </TreeNode>\n                                </Tree>\n                            </TreeTable>\n                        </Col>\n                    </Row>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nDemo3.propTypes = propTypes;\nDemo3.defaultProps = defaultProps;\n","desc":" 用户点击左侧的树形结构，可以进行右侧table数据的请求展示，table支持分页功能的操作"},{"example":<Demo4 />,"title":" 树表基本使用事例","code":"/**\n*\n* @title 树表基本使用事例\n* @description 事例涵盖 checkbox如何选择，disable状态和部分选择状态。\n*\n*/\n\n\nimport React, { Component, PropTypes } from 'react';\nimport { Con, Row, Col } from 'bee-layout';\nimport TreeTable from 'bee-tree-table';\nimport Tree from 'bee-tree';\n\nconst TreeNode = Tree.TreeNode;\n\nconst defaultProps = {\n    keys: ['0_0_0', '0_0_1']\n}\n\nclass Demo4 extends Component {\n    constructor(props) {\n        super(props);\n        const keys = this.props.keys;\n        this.state = {\n            defaultExpandedKeys: keys,\n            defaultSelectedKeys: keys,\n            defaultCheckedKeys: keys,\n            data: \"0_0_1_0\",\n            dataSource: [],\n            selectedKeys: []\n        };\n    }\n    onSelect = (info) => {\n        console.log('selected', info + \"first\");\n        let data;\n        if (info) {\n            data = info[0];\n            this.setState({\n                data: data\n            })\n        }\n    }\n    onCheck = (info) => {\n        console.log('onCheck', info);\n        let data;\n\n        if (info.length > 0) {\n            let arr = [];\n            let it = \"\";\n            info.map(function (item, index) {\n                if (item.length >= it.length) {\n                    it = item;\n                }\n            })\n            data = it;\n            this.setState({\n                data: data\n            })\n        } else {\n            this.setState({\n                data: \"0_0\",\n            })\n        }\n    }\n    render() {\n        let { data, dataSource } = this.state;\n        return (\n            <div>\n                <div>\n                    <Row>\n\n                        <Col md={12} sm={12}>\n                            <TreeTable data={data} dataSource={dataSource} >\n                                <Tree className=\"myCls\" showLine checkable\n                                    defaultExpandedKeys={this.state.defaultExpandedKeys}\n                                    defaultSelectedKeys={this.state.defaultSelectedKeys}\n                                    defaultCheckedKeys={this.state.defaultCheckedKeys}\n                                    onSelect={this.onSelect} onCheck={this.onCheck}\n                                    selectedKeys={this.state.selectedKeys}\n                                >\n                                    <TreeNode title=\"node 0_0\" key=\"0_0\">\n                                        <TreeNode title=\"node 0_0_0\" key=\"0_0_0\" disabled>\n                                            <TreeNode title=\"node 0_0_0_0\" key=\"0_0_0_0\" disableCheckbox />\n                                        </TreeNode>\n                                        <TreeNode title=\"node 0_0_1\" key=\"0_0_1\">\n                                            <TreeNode title=\"node 0_0_1_0\" key=\"0_0_1_0\" />\n                                        </TreeNode>\n                                    </TreeNode>\n                                </Tree>\n                            </TreeTable>\n                        </Col>\n                    </Row>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nDemo4.defaultProps = defaultProps;\n\n","desc":" 事例涵盖 checkbox如何选择，disable状态和部分选择状态。"},{"example":<Demo5 />,"title":" 带搜索的树表结构","code":"\n/**\n*\n* @title 带搜索的树表结构\n* @description 用户点击左侧的树形结构，可以进行右侧table数据的请求展示，同时table支持当前选中的树节点，对应table数据的搜索功能的操作\n*\n*/\nimport React, { Component, PropTypes } from 'react';\nimport { Con, Row, Col } from 'bee-layout';\nimport Button from 'bee-button';\nimport TreeTable from 'bee-tree-table';\nimport Tree from 'bee-tree';\nimport index from 'bee-tree';\n\nconst propTypes = {};\nconst TreeNode = Tree.TreeNode;\nconst defaultProps = {\n    keys: ['0_0_0', '0_0_1'],\n    defaultColumn: []\n};\nconsole.log(Tree);\nclass Demo5 extends Component {\n    constructor(props) {\n        super(props);\n        const keys = this.props.keys;\n        this.state = {\n            defaultExpandedKeys: keys,\n            defaultSelectedKeys: keys,\n            data: \"1_0\",\n            dataSource: [],\n            selectedKeys:[],\n            searchFlag:true\n        };\n        this.defaultColumn = [{\n            title: \"第一列\",\n            dataIndex: \"name\",\n            key: \"name\"\n        },\n        {\n            title: \"第二列\",\n            dataIndex: \"mail\",\n            key: \"mail\"\n        },\n        {\n            title: \"第三列\",\n            dataIndex: \"status\",\n            key: \"status\"\n        },\n        {\n            title: \"第四列\",\n            dataIndex: \"date\",\n            key: \"date\"\n        }, {\n            title: \"第五列\",\n            dataIndex: \"address\",\n            key: \"address\"\n        }]\n    }\n    /**\n     * 点击每一项\n     */\n    onSelect = (info) => {\n        console.log('selected', info);\n        let data;\n        if (info) {\n            data = info[0];\n            this.setState({\n                data: data\n            })\n            // this.getData(value); 这个方法用来与后台数据进行请求\n        }\n\n    }\n    /**\n     * 这里与后台请求用来返回数据\n     */\n    getData = (value) => {\n        this.setState({\n            dataSource: value\n        })\n    }\n\n    render() {\n        let { data, dataSource,searchFlag} = this.state;\n        return (\n            <div>\n                <div>\n                    <Row>\n                            \n                        <Col md={12} sm={12}>\n                            <TreeTable data={data} dataSource={dataSource} searchFlag={searchFlag} columns={this.defaultColumn}>\n                                <Tree className=\"myCls\" showLine\n                                    defaultExpandedKeys={this.state.defaultExpandedKeys}\n                                    defaultSelectedKeys={this.state.defaultSelectedKeys}\n                                    onSelect={this.onSelect}\n                                    selectedKeys={this.state.selectedKeys}\n                                >\n                                    <TreeNode title=\"畅捷通网络科技\" key=\"1_0\">\n                                        <TreeNode title=\"集成开发部\" key=\"1_0_0\" >\n                                            <TreeNode title=\"前端技术部\" key=\"1_0_0_0\" />\n                                        </TreeNode>\n                                        <TreeNode title=\"集团iuap平台\" key=\"1_1_0\">\n                                            <TreeNode title=\"集团iuap平台第一子公司\" key=\"1_1_0_1\" />\n                                            <TreeNode title=\"集团iuap平台第二子公司\" key=\"1_1_0_2\" />\n                                        </TreeNode>\n                                    </TreeNode>\n                                </Tree>\n                            </TreeTable>\n                        </Col>\n                    </Row>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nDemo5.propTypes = propTypes;\n","desc":" 用户点击左侧的树形结构，可以进行右侧table数据的请求展示，同时table支持当前选中的树节点，对应table数据的搜索功能的操作"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick() {
        this.setState({ open: !this.state.open })
    }

    render () {
        const { title, example, code, desc  } = this.props;
        let caret = this.state.open ? CARETUP : CARET;
        let text = this.state.open ? "隐藏代码" : "查看代码";

        const footer = (
            <Button shape="block" onClick={ this.handleClick }>
                { caret }
                { text }
            </Button>
        );
        return (
            <Col md={12} >
                <h3>{ title }</h3>
                <p>{ desc }</p>
                <Panel collapsible headerContent expanded={ this.state.open } colors='bordered' header={ example } footer={footer} footerStyle = {{padding: 0}}>
                    <pre><code className="hljs javascript">{ code }</code></pre>
                </Panel>
            </Col>
        )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
                <Row>
                    {DemoArray.map((child,index) => {

                        return (
                            <Demo example= {child.example} title= {child.title} code= {child.code} desc= {child.desc} key= {index}/>
                        )

                    })}
                </Row>
        )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
